import asyncio
from datetime import datetime, UTC

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode, ContentType
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from tgtoken import BOT_TOKEN
from storage import add_ad, list_ads, like_ad, delete_ad
from keyboards import main_menu, confirm_text_kb, ad_controls_kb, photo_caption_kb


bot = Bot(
    BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

class AddStates(StatesGroup):
    awaiting_content = State()
    awaiting_text_confirm = State()
    awaiting_photo_caption = State()

@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add ‚Äî —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
        "/help ‚Äî –ø–æ–º–æ—â—å",
        reply_markup=main_menu()
    )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "üìñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–µ–¥–ª–æ–∂—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ ‚Äî —Å–ø—Ä–æ—à—É –ø—Ä–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—é file_id.\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å –∞—É–¥–∏–æ/–≥–æ–ª–æ—Å ‚Äî —Å–æ—Ö—Ä–∞–Ω—é file_id.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add ‚Äî –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
    )

@dp.message(Command("add"))
async def cmd_add(message: Message, state: FSMContext):
    await state.set_state(AddStates.awaiting_content)
    await message.answer("–û–∫–µ–π! –û—Ç–ø—Ä–∞–≤—å <b>—Ç–µ–∫—Å—Ç</b>, <b>—Ñ–æ—Ç–æ</b> –∏–ª–∏ <b>–∞—É–¥–∏–æ/–≥–æ–ª–æ—Å</b> –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")

@dp.message(Command("list"))
async def cmd_list(message: Message):
    ads = await list_ads()
    if not ads:
        await message.answer("–ü–æ–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç. –î–æ–±–∞–≤—å –ø–µ—Ä–≤–æ–µ —á–µ—Ä–µ–∑ /add üôÇ")
        return
    for ad in ads:
        ad_id = ad.get("id")
        likes = int(ad.get("likes", 0))
        kb = ad_controls_kb(ad_id, likes)
        if ad["type"] == "text":
            await message.reply(f"üìù <b>–¢–µ–∫—Å—Ç:</b> {ad['content']}", reply_markup=kb)
        elif ad["type"] == "photo":
            caption = ad.get("caption") or "üì∑ –§–æ—Ç–æ-–æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
            await message.answer_photo(ad["file_id"], caption=caption, reply_markup=kb)
        elif ad["type"] in ("audio", "voice"):
            label = "üé∂ –ê—É–¥–∏–æ" if ad["type"] == "audio" else "üéô –ì–æ–ª–æ—Å"
            text = ad.get("caption") or f"{label}-–æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
            if ad["type"] == "audio":
                await message.answer_audio(ad["file_id"], caption=text, reply_markup=kb)
            else:
                await message.answer_voice(ad["file_id"], caption=text, reply_markup=kb)
        else:
            await message.answer(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ad['type']}", reply_markup=kb)

@dp.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def menu_add(message: Message, state: FSMContext):
    await cmd_add(message, state)

@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
async def menu_list(message: Message):
    await cmd_list(message)

@dp.message(F.content_type == ContentType.TEXT, ~F.text.startswith("/"))
async def handle_text(message: Message, state: FSMContext):
    cur = await state.get_state()
    if cur == AddStates.awaiting_photo_caption.state:
        data = await state.get_data()
        file_id = data.get("pending_photo_id")
        if not file_id:
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ /add.")
            await state.clear()
            return
        ad = {
            "user_id": message.from_user.id,
            "type": "photo",
            "file_id": file_id,
            "caption": message.text,
            "likes": 0,
            "created_at": datetime.now(UTC).isoformat()
        }
        ad_id = await add_ad(ad)
        await message.answer_photo(file_id, caption=f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ! (ID {ad_id})\n{message.text}")
        await state.clear()
        return
    await state.update_data(draft_text=message.text)
    await state.set_state(AddStates.awaiting_text_confirm)
    await message.answer(
        f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª:\n\n<blockquote>{message.text}</blockquote>\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?",
        reply_markup=confirm_text_kb()
    )

@dp.message(F.photo)
async def handle_photo(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    caption = message.caption
    if caption:
        ad = {
            "user_id": message.from_user.id,
            "type": "photo",
            "file_id": file_id,
            "caption": caption,
            "likes": 0,
            "created_at": datetime.now(UTC).isoformat()
        }
        ad_id = await add_ad(ad)
        await message.answer_photo(file_id, caption=f"‚úÖ –§–æ—Ç–æ-–æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (ID {ad_id})")
        await state.clear()
        return
    await state.set_state(AddStates.awaiting_photo_caption)
    await state.update_data(pending_photo_id=file_id)
    await message.answer(
        "–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ? –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–ò–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=photo_caption_kb()
    )

@dp.message(F.audio)
async def handle_audio(message: Message, state: FSMContext):
    ad = {
        "user_id": message.from_user.id,
        "type": "audio",
        "file_id": message.audio.file_id,
        "caption": message.caption,
        "likes": 0,
        "created_at": datetime.now(UTC).isoformat()
    }
    await add_ad(ad)
    await message.answer("üé∂ –ê—É–¥–∏–æ-–æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    await state.clear()

@dp.message(F.voice)
async def handle_voice(message: Message, state: FSMContext):
    ad = {
        "user_id": message.from_user.id,
        "type": "voice",
        "file_id": message.voice.file_id,
        "caption": message.caption,
        "likes": 0,
        "created_at": datetime.now(UTC).isoformat()
    }
    await add_ad(ad)
    await message.answer("üé∂ –ê—É–¥–∏–æ-–æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    await state.clear()

@dp.callback_query(F.data.startswith("confirm_text:"))
async def cb_confirm_text(call: CallbackQuery, state: FSMContext):
    action = call.data.split(":", 1)[1]
    data = await state.get_data()
    draft = data.get("draft_text")
    if action == "save" and draft:
        ad = {
            "user_id": call.from_user.id,
            "type": "text",
            "content": draft,
            "likes": 0,
            "created_at": datetime.now(UTC).isoformat()
        }
        ad_id = await add_ad(ad)
        await call.message.edit_text(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ! (ID {ad_id})\n\n<blockquote>{draft}</blockquote>")
        await state.clear()
    else:
        await call.message.edit_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
    await call.answer()

@dp.callback_query(F.data.startswith("photo:"))
async def cb_photo(call: CallbackQuery, state: FSMContext):
    action = call.data.split(":", 1)[1]
    data = await state.get_data()
    file_id = data.get("pending_photo_id")
    if action == "save_no_caption" and file_id:
        ad = {
            "user_id": call.from_user.id,
            "type": "photo",
            "file_id": file_id,
            "caption": None,
            "likes": 0,
            "created_at": datetime.now(UTC).isoformat()
        }
        await add_ad(ad)
        await call.message.answer_photo(file_id, caption=f"‚úÖ –§–æ—Ç–æ-–æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        await state.clear()
        await call.message.delete()
    else:
        await call.message.edit_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
    await call.answer()

@dp.callback_query(F.data.startswith("ad:like:"))
async def cb_like(call: CallbackQuery):
    new_likes = await like_ad(int(call.data.split(":")[-1]))
    if new_likes is None:
        await call.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    kb = ad_controls_kb(int(call.data.split(":")[-1]), new_likes)
    try:
        await call.message.edit_reply_markup(reply_markup=kb)
    except Exception:
        pass
    await call.answer("‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ!")

@dp.callback_query(F.data.startswith("ad:del:"))
async def cb_delete(call: CallbackQuery):
    ok = await delete_ad(int(call.data.split(":")[-1]), call.from_user.id)
    if not ok:
        await call.answer("–£–¥–∞–ª–∏—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä.", show_alert=True)
        return
    await call.answer("üóë –£–¥–∞–ª–µ–Ω–æ.")
    try:
        await call.message.delete()
    except Exception:
        pass

def main():
    asyncio.run(dp.start_polling(bot))

if __name__ == "__main__":
    main()
